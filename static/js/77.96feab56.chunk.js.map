{"version":3,"file":"static/js/77.96feab56.chunk.js","mappings":"iLA6BE,IA1BA,SAAmB,GAA8C,IAA7CA,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAc,EAAdA,eAC5C,OACI,iBAAKC,UAAW,0CAA4CF,GAAa,QAAQ,WAG7E,UAAC,IAAQ,CAACG,WAAYF,EAAiB,eAAiB,GAAG,UACxDH,EAIGG,IAAkB,gBAAKC,UAAU,2BAA0B,SAAED,QAInE,gBAAKC,UAAU,kBAGf,gBAAKA,UAAU,iCAAgC,SAC1CH,MAKjB,C,iDCpBF,IANC,SAAkB,GAAwB,IAAvBI,EAAU,EAAVA,WAAYJ,EAAQ,EAARA,SAC5B,OACI,gBAAKG,UAAS,gCAA2BC,GAAa,SAAEJ,GAEhE,C,yMCMME,EAAiB,WAEnB,IAAMG,GAAWC,EAAAA,EAAAA,MAMjB,OACI,gBAAKH,UAAU,2BAA0B,UACrC,mBAAQA,UAAU,0CAA0CI,QAAS,WALzEF,GAASG,EAAAA,EAAAA,IAAU,CAACT,MAAQ,eAAgBU,SAAWC,EAAAA,iBAAAA,eAK6C,EAAC,sBAG7G,EAgFA,MA9EA,WAEI,IAAOC,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAAzCH,MACDN,GAAWC,EAAAA,EAAAA,MAqBjB,OAnBAS,EAAAA,EAAAA,YAAU,WACNV,GAASW,EAAAA,EAAAA,MACb,GAAG,KAkBC,+BAEI,SAACC,EAAA,EAAS,CAAClB,MAAM,gBAAgBE,UAAU,OAAOC,gBAAgB,SAACA,EAAc,IAAI,UAGrF,gBAAKC,UAAU,yBAAwB,UACnC,mBAAOA,UAAU,eAAc,WAC3B,4BACA,2BACI,kCACA,sCACA,wCACA,oCACA,yCACA,wBAGJ,2BAEQQ,EAAMO,KAAI,SAACC,EAAGC,GACV,OACI,2BACA,yBACI,iBAAKjB,UAAU,8BAA6B,WACxC,gBAAKA,UAAU,SAAQ,UACnB,gBAAKA,UAAU,+BAA8B,UACzC,gBAAKkB,IAAKF,EAAEG,OAAQC,IAAI,gBAGhC,4BACI,gBAAKpB,UAAU,YAAW,SAAEgB,EAAEK,cAC9B,gBAAKrB,UAAU,qBAAoB,SAAEgB,EAAEM,qBAInD,wBAAKN,EAAEO,SACP,wBAAKC,IAAO,IAAIC,MAAQC,KAAK,GAAGT,EAAE,GAAI,QAAQU,OAAO,gBACrD,yBAnDRC,EAmD4BX,EAlD7CW,EAAQ,IAAM,GAAS,gBAAK5B,UAAU,QAAO,4BACxC4B,EAAQ,IAAM,GAAS,gBAAK5B,UAAU,sBAAqB,yBAC3D4B,EAAQ,IAAM,GAAS,gBAAK5B,UAAU,wBAAuB,kBAC7D4B,EAAQ,IAAM,GAAS,gBAAK5B,UAAU,qBAAoB,4BACtD,gBAAKA,UAAU,oBAAmB,sBA+ClB,wBAAKgB,EAAEM,aACP,yBAAI,mBAAQtB,UAAU,2BAA2BI,QAAS,kBA7ChE,SAACwB,GACvB1B,GAASG,EAAAA,EAAAA,IAAU,CAACT,MAAQ,eAAgBU,SAAWC,EAAAA,iBAAAA,aACvDsB,YAAc,CAAEC,QAAO,6CAAiDC,KAAOC,EAAAA,+BAAAA,YAA4CJ,MAAAA,KAC/H,CA0CgGK,CAAkBhB,EAAE,EAAC,UAAC,SAAC,IAAS,CAACjB,UAAU,cAlBlGiB,GAnClB,IAACW,CAwDA,cAQ5B,EClFA,MAbA,WACI,IAAM1B,GAAWC,EAAAA,EAAAA,MAOjB,OALAS,EAAAA,EAAAA,YAAU,WACNV,GAASgC,EAAAA,EAAAA,IAAa,CAAEtC,MAAQ,UAClC,GAAG,KAID,SAAC,EAAK,GAEd,C,kEChBMuC,EAAQC,EAAQ,MAyBtB,IAAMC,EAAaF,EAAMG,YAvBzB,SAAmB,EAIhBC,GAAQ,IAHT3C,EAAK,EAALA,MACA4C,EAAO,EAAPA,QACGC,EAAK,OAER,OAAoBN,EAAMO,cAAc,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACfC,IAAKX,EACL,kBAAmBC,GAClBC,GAAQ7C,EAAqBuC,EAAMO,cAAc,QAAS,CAC3DS,GAAIX,GACH5C,GAAS,KAAmBuC,EAAMO,cAAc,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,4ZAEP,IAGAC,EAAOC,QAAUnB,C","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/leads/index.js","pages/protected/Leads.js","../node_modules/@heroicons/react/24/outline/TrashIcon.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import moment from \"moment\"\nimport { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport TitleCard from \"../../components/Cards/TitleCard\"\nimport { openModal } from \"../common/modalSlice\"\nimport { deleteLead, getLeadsContent } from \"./leadSlice\"\nimport { CONFIRMATION_MODAL_CLOSE_TYPES, MODAL_BODY_TYPES } from '../../utils/globalConstantUtil'\nimport TrashIcon from '@heroicons/react/24/outline/TrashIcon'\nimport { showNotification } from '../common/headerSlice'\n\nconst TopSideButtons = () => {\n\n    const dispatch = useDispatch()\n\n    const openAddNewLeadModal = () => {\n        dispatch(openModal({title : \"Add New Lead\", bodyType : MODAL_BODY_TYPES.LEAD_ADD_NEW}))\n    }\n\n    return(\n        <div className=\"inline-block float-right\">\n            <button className=\"btn px-6 btn-sm normal-case btn-primary\" onClick={() => openAddNewLeadModal()}>Add New</button>\n        </div>\n    )\n}\n\nfunction Leads(){\n\n    const {leads } = useSelector(state => state.lead)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getLeadsContent())\n    }, [])\n\n    \n\n    const getDummyStatus = (index) => {\n        if(index % 5 === 0)return <div className=\"badge\">Not Interested</div>\n        else if(index % 5 === 1)return <div className=\"badge badge-primary\">In Progress</div>\n        else if(index % 5 === 2)return <div className=\"badge badge-secondary\">Sold</div>\n        else if(index % 5 === 3)return <div className=\"badge badge-accent\">Need Followup</div>\n        else return <div className=\"badge badge-ghost\">Open</div>\n    }\n\n    const deleteCurrentLead = (index) => {\n        dispatch(openModal({title : \"Confirmation\", bodyType : MODAL_BODY_TYPES.CONFIRMATION, \n        extraObject : { message : `Are you sure you want to delete this lead?`, type : CONFIRMATION_MODAL_CLOSE_TYPES.LEAD_DELETE, index}}))\n    }\n\n    return(\n        <>\n            \n            <TitleCard title=\"Current Leads\" topMargin=\"mt-2\" TopSideButtons={<TopSideButtons />}>\n\n                {/* Leads List in table format loaded from slice after api call */}\n            <div className=\"overflow-x-auto w-full\">\n                <table className=\"table w-full\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Email Id</th>\n                        <th>Created At</th>\n                        <th>Status</th>\n                        <th>Assigned To</th>\n                        <th></th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            leads.map((l, k) => {\n                                return(\n                                    <tr key={k}>\n                                    <td>\n                                        <div className=\"flex items-center space-x-3\">\n                                            <div className=\"avatar\">\n                                                <div className=\"mask mask-squircle w-12 h-12\">\n                                                    <img src={l.avatar} alt=\"Avatar\" />\n                                                </div>\n                                            </div>\n                                            <div>\n                                                <div className=\"font-bold\">{l.first_name}</div>\n                                                <div className=\"text-sm opacity-50\">{l.last_name}</div>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td>{l.email}</td>\n                                    <td>{moment(new Date()).add(-5*(k+2), 'days').format(\"DD MMM YY\")}</td>\n                                    <td>{getDummyStatus(k)}</td>\n                                    <td>{l.last_name}</td>\n                                    <td><button className=\"btn btn-square btn-ghost\" onClick={() => deleteCurrentLead(k)}><TrashIcon className=\"w-5\"/></button></td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n            </TitleCard>\n        </>\n    )\n}\n\n\nexport default Leads","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport Leads from '../../features/leads'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Leads\"}))\n      }, [])\n\n\n    return(\n        <Leads />\n    )\n}\n\nexport default InternalPage","const React = require(\"react\");\n\nfunction TrashIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(TrashIcon);\nmodule.exports = ForwardRef;"],"names":["title","children","topMargin","TopSideButtons","className","styleClass","dispatch","useDispatch","onClick","openModal","bodyType","MODAL_BODY_TYPES","leads","useSelector","state","lead","useEffect","getLeadsContent","TitleCard","map","l","k","src","avatar","alt","first_name","last_name","email","moment","Date","add","format","index","extraObject","message","type","CONFIRMATION_MODAL_CLOSE_TYPES","deleteCurrentLead","setPageTitle","React","require","ForwardRef","forwardRef","svgRef","titleId","props","createElement","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","module","exports"],"sourceRoot":""}